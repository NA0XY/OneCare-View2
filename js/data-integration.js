/**
 * OneCare Data Integration Layer
 * Connects multiple data sources for comprehensive patient health information
 * Integrates with EHR, lab systems, vital signs, and social determinants APIs
 */

class OneCareDataIntegration {
    constructor() {
        this.apiEndpoints = {
            ehr: process.env.EHR_API_URL || 'https://api.epic.com/fhir',
            labs: process.env.LABS_API_URL || 'https://api.labcorp.com/v1',
            vitals: process.env.VITALS_API_URL || 'https://api.fitbit.com/1',
            socialDeterminants: process.env.SDOH_API_URL || 'https://api.socialneeds.com/v1',
            medications: process.env.MEDS_API_URL || '/api/medications',
            environmental: process.env.ENV_API_URL || 'https://api.airnow.gov'
        };
        
        this.cache = new Map();
        this.cacheExpiry = 15 * 60 * 1000; // 15 minutes
        
        this.initializeConnectors();
    }
    
    initializeConnectors() {
        // Initialize FHIR connector for EHR integration
        this.fhirConnector = new FHIRConnector(this.apiEndpoints.ehr);
        
        // Initialize lab results connector
        this.labConnector = new LabResultsConnector(this.apiEndpoints.labs);
        
        // Initialize vital signs connector
        this.vitalsConnector = new VitalSignsConnector(this.apiEndpoints.vitals);
        
        // Initialize social determinants connector
        this.socialConnector = new SocialDeterminantsConnector(this.apiEndpoints.socialDeterminants);
        
        // Initialize environmental data connector
        this.environmentalConnector = new EnvironmentalDataConnector(this.apiEndpoints.environmental);
        
        console.log('OneCare Data Integration initialized');
    }
    
    /**
     * Get comprehensive patient data from all sources
     */
    async getComprehensivePatientData(patientId) {
        const cacheKey = `patient_data_${patientId}`;
        
        // Check cache first
        if (this.cache.has(cacheKey)) {
            const cached = this.cache.get(cacheKey);
            if (Date.now() - cached.timestamp < this.cacheExpiry) {
                return cached.data;
            }
        }
        
        try {
            // Fetch data from all sources in parallel
            const [
                demographicData,
                medicalHistory,
                labResults,
                vitalSigns,
                medications,
                socialDeterminants,
                environmentalData
            ] = await Promise.allSettled([
                this.getDemographicData(patientId),
                this.getMedicalHistory(patientId),
                this.getLabResults(patientId),
                this.getVitalSigns(patientId),
                this.getMedications(patientId),
                this.getSocialDeterminants(patientId),
                this.getEnvironmentalData(patientId)
            ]);
            
            // Combine all data sources
            const comprehensiveData = {
                patientId,
                lastUpdated: new Date().toISOString(),
                demographics: this.extractValue(demographicData),
                medicalHistory: this.extractValue(medicalHistory),
                labResults: this.extractValue(labResults),
                vitalSigns: this.extractValue(vitalSigns),
                medications: this.extractValue(medications),
                socialDeterminants: this.extractValue(socialDeterminants),
                environmentalFactors: this.extractValue(environmentalData),
                dataQuality: this.assessDataQuality([
                    demographicData,
                    medicalHistory,
                    labResults,
                    vitalSigns,
                    medications,
                    socialDeterminants,
                    environmentalData
                ])
            };
            
            // Cache the result
            this.cache.set(cacheKey, {
                data: comprehensiveData,
                timestamp: Date.now()
            });
            
            return comprehensiveData;
            
        } catch (error) {
            console.error('Error fetching comprehensive patient data:', error);
            throw new Error('Failed to retrieve patient data from integrated sources');
        }
    }
    
    /**
     * Get demographic data from EHR
     */
    async getDemographicData(patientId) {
        try {
            const fhirPatient = await this.fhirConnector.getPatient(patientId);
            
            return {
                id: patientId,\n                firstName: fhirPatient.name?.[0]?.given?.[0] || '',\n                lastName: fhirPatient.name?.[0]?.family || '',\n                dateOfBirth: fhirPatient.birthDate,\n                age: this.calculateAge(fhirPatient.birthDate),\n                gender: fhirPatient.gender || 'unknown',\n                race: this.extractRace(fhirPatient.extension),\n                ethnicity: this.extractEthnicity(fhirPatient.extension),\n                address: fhirPatient.address?.[0] || {},\n                phone: fhirPatient.telecom?.find(t => t.system === 'phone')?.value || '',\n                email: fhirPatient.telecom?.find(t => t.system === 'email')?.value || '',\n                maritalStatus: fhirPatient.maritalStatus?.text || 'unknown',\n                preferredLanguage: fhirPatient.communication?.[0]?.language?.text || 'English'\n            };\n            \n        } catch (error) {\n            console.warn('Unable to fetch demographic data:', error.message);\n            return this.getDefaultDemographics(patientId);\n        }\n    }\n    \n    /**\n     * Get medical history from EHR\n     */\n    async getMedicalHistory(patientId) {\n        try {\n            const [conditions, procedures, allergies, familyHistory] = await Promise.allSettled([\n                this.fhirConnector.getConditions(patientId),\n                this.fhirConnector.getProcedures(patientId),\n                this.fhirConnector.getAllergies(patientId),\n                this.fhirConnector.getFamilyHistory(patientId)\n            ]);\n            \n            return {\n                activeConditions: this.extractValue(conditions) || [],\n                pastMedicalHistory: this.extractValue(procedures) || [],\n                allergies: this.extractValue(allergies) || [],\n                familyHistory: this.extractValue(familyHistory) || [],\n                riskFactors: this.identifyRiskFactors([\n                    this.extractValue(conditions),\n                    this.extractValue(familyHistory)\n                ])\n            };\n            \n        } catch (error) {\n            console.warn('Unable to fetch medical history:', error.message);\n            return {\n                activeConditions: [],\n                pastMedicalHistory: [],\n                allergies: [],\n                familyHistory: [],\n                riskFactors: []\n            };\n        }\n    }\n    \n    /**\n     * Get lab results from laboratory systems\n     */\n    async getLabResults(patientId, lookbackDays = 365) {\n        try {\n            const labData = await this.labConnector.getResults(patientId, lookbackDays);\n            \n            return {\n                hba1c: this.getLatestLabValue(labData, 'HbA1c'),\n                glucose: this.getLatestLabValue(labData, 'Glucose'),\n                totalCholesterol: this.getLatestLabValue(labData, 'Total Cholesterol'),\n                ldl: this.getLatestLabValue(labData, 'LDL'),\n                hdl: this.getLatestLabValue(labData, 'HDL'),\n                triglycerides: this.getLatestLabValue(labData, 'Triglycerides'),\n                creatinine: this.getLatestLabValue(labData, 'Creatinine'),\n                bun: this.getLatestLabValue(labData, 'BUN'),\n                vitaminD: this.getLatestLabValue(labData, 'Vitamin D'),\n                thyroidTsh: this.getLatestLabValue(labData, 'TSH'),\n                psa: this.getLatestLabValue(labData, 'PSA'),\n                cea: this.getLatestLabValue(labData, 'CEA'),\n                trends: this.calculateLabTrends(labData)\n            };\n            \n        } catch (error) {\n            console.warn('Unable to fetch lab results:', error.message);\n            return this.getMockLabResults();\n        }\n    }\n    \n    /**\n     * Get vital signs from connected devices or manual entries\n     */\n    async getVitalSigns(patientId, lookbackDays = 90) {\n        try {\n            const vitalData = await this.vitalsConnector.getVitals(patientId, lookbackDays);\n            \n            return {\n                bloodPressure: {\n                    systolic: this.getLatestVital(vitalData, 'bp_systolic'),\n                    diastolic: this.getLatestVital(vitalData, 'bp_diastolic'),\n                    trend: this.calculateVitalTrend(vitalData, 'blood_pressure')\n                },\n                heartRate: {\n                    resting: this.getLatestVital(vitalData, 'heart_rate'),\n                    trend: this.calculateVitalTrend(vitalData, 'heart_rate')\n                },\n                weight: {\n                    current: this.getLatestVital(vitalData, 'weight'),\n                    trend: this.calculateVitalTrend(vitalData, 'weight')\n                },\n                height: this.getLatestVital(vitalData, 'height'),\n                bmi: this.calculateBMI(\n                    this.getLatestVital(vitalData, 'weight'),\n                    this.getLatestVital(vitalData, 'height')\n                ),\n                temperature: this.getLatestVital(vitalData, 'temperature'),\n                oxygenSaturation: this.getLatestVital(vitalData, 'oxygen_saturation')\n            };\n            \n        } catch (error) {\n            console.warn('Unable to fetch vital signs:', error.message);\n            return this.getMockVitalSigns();\n        }\n    }\n    \n    /**\n     * Get current medications from pharmacy or EHR\n     */\n    async getMedications(patientId) {\n        try {\n            const medicationData = await this.fhirConnector.getMedications(patientId);\n            \n            return {\n                active: medicationData.filter(med => med.status === 'active'),\n                chronic: medicationData.filter(med => med.chronic === true),\n                recentChanges: medicationData.filter(med => {\n                    const changeDate = new Date(med.lastModified);\n                    const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);\n                    return changeDate > thirtyDaysAgo;\n                }),\n                adherenceScore: await this.calculateMedicationAdherence(patientId),\n                interactions: await this.checkDrugInteractions(medicationData)\n            };\n            \n        } catch (error) {\n            console.warn('Unable to fetch medications:', error.message);\n            return {\n                active: [],\n                chronic: [],\n                recentChanges: [],\n                adherenceScore: null,\n                interactions: []\n            };\n        }\n    }\n    \n    /**\n     * Get social determinants of health data\n     */\n    async getSocialDeterminants(patientId) {\n        try {\n            const sdohData = await this.socialConnector.getAssessment(patientId);\n            \n            return {\n                housing: {\n                    status: sdohData.housing?.status || 'unknown',\n                    stability: sdohData.housing?.stability || 'unknown',\n                    affordability: sdohData.housing?.affordability || 'unknown'\n                },\n                food: {\n                    security: sdohData.food?.security || 'unknown',\n                    access: sdohData.food?.access || 'unknown',\n                    quality: sdohData.food?.quality || 'unknown'\n                },\n                transportation: {\n                    reliability: sdohData.transportation?.reliability || 'unknown',\n                    barriers: sdohData.transportation?.barriers || []\n                },\n                finances: {\n                    income: sdohData.finances?.income || 'not_disclosed',\n                    employment: sdohData.finances?.employment || 'unknown',\n                    insurance: sdohData.finances?.insurance || 'unknown'\n                },\n                education: {\n                    level: sdohData.education?.level || 'unknown',\n                    healthLiteracy: sdohData.education?.healthLiteracy || 'unknown'\n                },\n                socialSupport: {\n                    family: sdohData.social?.family || 'unknown',\n                    community: sdohData.social?.community || 'unknown',\n                    isolation: sdohData.social?.isolation || 'unknown'\n                },\n                safetyStress: {\n                    personalSafety: sdohData.safety?.personal || 'unknown',\n                    stressLevel: sdohData.safety?.stress || 'unknown'\n                },\n                lastAssessed: sdohData.lastAssessed || null\n            };\n            \n        } catch (error) {\n            console.warn('Unable to fetch social determinants:', error.message);\n            return this.getDefaultSocialDeterminants();\n        }\n    }\n    \n    /**\n     * Get environmental health data\n     */\n    async getEnvironmentalData(patientId) {\n        try {\n            // Get patient's zip code from demographics\n            const demographics = await this.getDemographicData(patientId);\n            const zipCode = demographics.address?.postalCode;\n            \n            if (!zipCode) {\n                return this.getDefaultEnvironmentalData();\n            }\n            \n            const environmentalData = await this.environmentalConnector.getEnvironmentalFactors(zipCode);\n            \n            return {\n                airQuality: {\n                    aqi: environmentalData.airQuality?.aqi || null,\n                    primaryPollutant: environmentalData.airQuality?.primaryPollutant || null,\n                    healthConcern: environmentalData.airQuality?.healthConcern || null\n                },\n                waterQuality: {\n                    score: environmentalData.waterQuality?.score || null,\n                    contaminants: environmentalData.waterQuality?.contaminants || []\n                },\n                noiseLevel: environmentalData.noiseLevel || null,\n                climateFactors: {\n                    uvIndex: environmentalData.climate?.uvIndex || null,\n                    heatIndex: environmentalData.climate?.heatIndex || null,\n                    humidity: environmentalData.climate?.humidity || null\n                },\n                proximityRisks: {\n                    industrialSites: environmentalData.proximity?.industrial || [],\n                    hazardousWaste: environmentalData.proximity?.hazardous || [],\n                    highTrafficAreas: environmentalData.proximity?.traffic || false\n                }\n            };\n            \n        } catch (error) {\n            console.warn('Unable to fetch environmental data:', error.message);\n            return this.getDefaultEnvironmentalData();\n        }\n    }\n    \n    /**\n     * Utility methods\n     */\n    extractValue(promiseResult) {\n        return promiseResult.status === 'fulfilled' ? promiseResult.value : null;\n    }\n    \n    assessDataQuality(promiseResults) {\n        const successful = promiseResults.filter(result => result.status === 'fulfilled').length;\n        const total = promiseResults.length;\n        \n        const completeness = successful / total;\n        let quality = 'poor';\n        \n        if (completeness >= 0.8) quality = 'excellent';\n        else if (completeness >= 0.6) quality = 'good';\n        else if (completeness >= 0.4) quality = 'fair';\n        \n        return {\n            completeness,\n            quality,\n            successfulSources: successful,\n            totalSources: total,\n            lastUpdated: new Date().toISOString()\n        };\n    }\n    \n    calculateAge(birthDate) {\n        if (!birthDate) return null;\n        const today = new Date();\n        const birth = new Date(birthDate);\n        let age = today.getFullYear() - birth.getFullYear();\n        const monthDiff = today.getMonth() - birth.getMonth();\n        \n        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\n            age--;\n        }\n        \n        return age;\n    }\n    \n    calculateBMI(weight, height) {\n        if (!weight || !height) return null;\n        \n        // Convert height to meters if in cm\n        const heightInMeters = height > 10 ? height / 100 : height;\n        \n        return Math.round((weight / (heightInMeters ** 2)) * 10) / 10;\n    }\n    \n    extractRace(extensions) {\n        // Extract race from FHIR patient extensions\n        const raceExtension = extensions?.find(ext => \n            ext.url?.includes('us-core-race')\n        );\n        return raceExtension?.valueString || 'not_specified';\n    }\n    \n    extractEthnicity(extensions) {\n        // Extract ethnicity from FHIR patient extensions\n        const ethnicityExtension = extensions?.find(ext => \n            ext.url?.includes('us-core-ethnicity')\n        );\n        return ethnicityExtension?.valueString || 'not_specified';\n    }\n    \n    getLatestLabValue(labData, testName) {\n        const tests = labData.filter(lab => \n            lab.name.toLowerCase().includes(testName.toLowerCase())\n        );\n        \n        if (tests.length === 0) return null;\n        \n        // Sort by date descending and return the most recent\n        const latest = tests.sort((a, b) => new Date(b.date) - new Date(a.date))[0];\n        \n        return {\n            value: latest.value,\n            unit: latest.unit,\n            date: latest.date,\n            reference: latest.referenceRange,\n            status: this.interpretLabValue(latest.value, latest.referenceRange)\n        };\n    }\n    \n    getLatestVital(vitalData, vitalType) {\n        const vitals = vitalData.filter(vital => vital.type === vitalType);\n        \n        if (vitals.length === 0) return null;\n        \n        const latest = vitals.sort((a, b) => new Date(b.date) - new Date(a.date))[0];\n        return latest.value;\n    }\n    \n    interpretLabValue(value, referenceRange) {\n        if (!referenceRange) return 'normal';\n        \n        const [min, max] = referenceRange.split('-').map(v => parseFloat(v.trim()));\n        \n        if (value < min) return 'low';\n        if (value > max) return 'high';\n        return 'normal';\n    }\n    \n    identifyRiskFactors(medicalData) {\n        const riskFactors = [];\n        const [conditions, familyHistory] = medicalData;\n        \n        // High-risk conditions\n        const highRiskConditions = ['diabetes', 'hypertension', 'heart disease', 'cancer'];\n        \n        conditions?.forEach(condition => {\n            if (highRiskConditions.some(risk => \n                condition.name.toLowerCase().includes(risk)\n            )) {\n                riskFactors.push({\n                    type: 'condition',\n                    factor: condition.name,\n                    severity: 'high'\n                });\n            }\n        });\n        \n        // Family history risk factors\n        familyHistory?.forEach(history => {\n            if (highRiskConditions.some(risk => \n                history.condition.toLowerCase().includes(risk)\n            )) {\n                riskFactors.push({\n                    type: 'family_history',\n                    factor: history.condition,\n                    severity: 'medium',\n                    relationship: history.relationship\n                });\n            }\n        });\n        \n        return riskFactors;\n    }\n    \n    // Mock data methods for fallback\n    getDefaultDemographics(patientId) {\n        return {\n            id: patientId,\n            firstName: 'Demo',\n            lastName: 'Patient',\n            age: 45,\n            gender: 'female',\n            race: 'not_specified',\n            ethnicity: 'not_specified'\n        };\n    }\n    \n    getMockLabResults() {\n        return {\n            hba1c: { value: 6.2, unit: '%', date: '2024-02-15', status: 'normal' },\n            glucose: { value: 95, unit: 'mg/dL', date: '2024-02-15', status: 'normal' },\n            totalCholesterol: { value: 180, unit: 'mg/dL', date: '2024-01-20', status: 'normal' },\n            ldl: { value: 110, unit: 'mg/dL', date: '2024-01-20', status: 'normal' },\n            hdl: { value: 55, unit: 'mg/dL', date: '2024-01-20', status: 'normal' }\n        };\n    }\n    \n    getMockVitalSigns() {\n        return {\n            bloodPressure: { systolic: 128, diastolic: 82 },\n            heartRate: { resting: 72 },\n            weight: { current: 165 },\n            height: 165,\n            bmi: 24.2\n        };\n    }\n    \n    getDefaultSocialDeterminants() {\n        return {\n            housing: { status: 'stable' },\n            food: { security: 'secure' },\n            transportation: { reliability: 'reliable' },\n            finances: { income: 'not_disclosed' },\n            education: { level: 'unknown' },\n            socialSupport: { family: 'moderate' }\n        };\n    }\n    \n    getDefaultEnvironmentalData() {\n        return {\n            airQuality: { aqi: 85, healthConcern: 'moderate' },\n            waterQuality: { score: 80 },\n            climateFactors: { uvIndex: 6 }\n        };\n    }\n}\n\n// Connector classes for different data sources\nclass FHIRConnector {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n    \n    async getPatient(patientId) {\n        // Mock implementation - would make actual FHIR API calls\n        return {\n            id: patientId,\n            name: [{ given: ['Demo'], family: 'Patient' }],\n            birthDate: '1979-03-15',\n            gender: 'female'\n        };\n    }\n    \n    async getConditions(patientId) {\n        // Mock implementation\n        return [\n            { name: 'Hypertension', status: 'active' },\n            { name: 'Type 2 Diabetes', status: 'active' }\n        ];\n    }\n    \n    // Additional FHIR methods...\n}\n\nclass LabResultsConnector {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n    \n    async getResults(patientId, lookbackDays) {\n        // Mock implementation - would connect to lab systems\n        return [\n            {\n                name: 'HbA1c',\n                value: 6.2,\n                unit: '%',\n                date: '2024-02-15',\n                referenceRange: '4.0-5.6'\n            }\n        ];\n    }\n}\n\nclass VitalSignsConnector {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n    \n    async getVitals(patientId, lookbackDays) {\n        // Mock implementation - would connect to devices/apps\n        return [\n            {\n                type: 'bp_systolic',\n                value: 128,\n                date: '2024-03-01'\n            }\n        ];\n    }\n}\n\nclass SocialDeterminantsConnector {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n    \n    async getAssessment(patientId) {\n        // Mock implementation - would connect to social needs assessment\n        return {\n            housing: { status: 'stable' },\n            food: { security: 'secure' },\n            transportation: { reliability: 'reliable' }\n        };\n    }\n}\n\nclass EnvironmentalDataConnector {\n    constructor(baseUrl) {\n        this.baseUrl = baseUrl;\n    }\n    \n    async getEnvironmentalFactors(zipCode) {\n        // Mock implementation - would connect to environmental APIs\n        return {\n            airQuality: { aqi: 85, healthConcern: 'moderate' },\n            waterQuality: { score: 80 }\n        };\n    }\n}\n\n// Export for use in other modules\nif (typeof module !== 'undefined' && module.exports) {\n    module.exports = OneCareDataIntegration;\n} else {\n    window.OneCareDataIntegration = OneCareDataIntegration;\n}